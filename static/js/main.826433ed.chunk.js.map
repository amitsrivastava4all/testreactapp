{"version":3,"sources":["logo.svg","components/Item.js","components/List.js","components/Search.js","utils/axioscall.js","container/RefDemo.js","container/Shop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","props","id","name","src","url","defaultProps","List","items","map","itemObject","key","Search","type","placeholder","onChange","takeInput","axios","defaults","baseURL","headers","get","myInterceptor","interceptors","request","use","console","log","localStorage","tokenNumber","tokenId","makeAxiosCall","create","timeout","maxContentLength","response","data","setTimeout","eject","RefDemo","state","msg","this","refs","object","value","result","setState","ref","onClick","saveInfo","bind","Component","Shop","searchValue","counter","interval","undefined","json","JSON","parse","e","arr","event","target","promise","promise2","promise3","all","then","catch","err","toggleMessage","setInterval","nextProps","nextState","clearInterval","React","App","count","jsx","changeX","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.826433ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n// export const Item = (props)=>{\n//     return (\n//         <>\n//         <p>{props.item.id} {props.item.name}</p>\n//         <img src={props.item.url}/>\n//         <button>Add to Cart</button>\n//         </>\n//     )\n// }\n\nexport const Item = (props)=>{\n    return (\n        <>\n         <p>{props.id} {props.name}</p>\n         <img src={props.url}/>\n         <button>Add to Cart</button>\n        </>\n    )\n}\nItem.defaultProps = {\n    name:'Apple IPhone X'\n}\nItem.propTypes = {\n    id:PropTypes.number.isRequired,\n    url:PropTypes.string.isRequired\n}","import React from 'react';\nimport {Item} from './Item';\nexport const List = (props)=>{\n    return (\n        <div>\n            {/* {props.items.map(itemObject=><Item key={itemObject.id} item={itemObject}/>)} */}\n            {props.items.map(itemObject=><Item key={itemObject.id}   url={itemObject.url} />)}\n        </div>\n    )\n}","import React from 'react';\nexport const Search = (props)=>{\n    return (\n        <>\n        <input type='text' placeholder='Type to Search' onChange = {props.takeInput}/>\n        </>\n    )\n}","import axios from 'axios';\n//axios.defaults.baseURL = 'http://localhost:1234';\naxios.defaults.baseURL='https://raw.githubusercontent.com/brainmentorspvtltd/myserverdata/master';\naxios.defaults.headers.get['Content-Type']='application/json';\nconst myInterceptor = axios.interceptors.request.use(request=>{\n    console.log('Request Interceptor Invoked ',localStorage.tokenNumber);\n    //request.tokenId = 'A123456';\n\n    request.tokenId = localStorage.tokenNumber;\n    return request;\n});\n\naxios.interceptors.response.use(response=>{\n    console.log('Response Interceptor Invoked ',response);\n    response.data['mobiles'][0].id = 999999;\n    return response;\n});\nsetTimeout(()=>{\naxios.interceptors.request.eject(myInterceptor);\n},9000);\nexport function makeAxiosCall(url){\n    const options = {\n        //method:'GET',\n        //url:url,\n        //timeout:3000,\n        maxContentLength:4000\n        // data:{\n        //     firstName:'Brain',\n        //     lastName:'Mentors'\n        // }\n    };\n    console.log('*********************Axios is  Type ',typeof axios);\n//var promise = axios(options);\nvar axiosMyObject = axios.create({baseURL:'https://raw.githubusercontent.com/brainmentorspvtltd/myserverdata/master'\n, timeout:4000});\nvar promise  = axiosMyObject.get(url,options);\n//var promise = axios.get(url,options);  // axios.post()\nreturn promise;\n}\n","import React,{ Component } from \"react\";\n\nexport class RefDemo extends Component{\n  \n    constructor(){\n        super();\n        this.state = {msg:''};\n\n    }\n    // this will take input of all textboxes\n    saveInfo(){\n            console.log('Ref is ',this.refs, 'Type of ',typeof this.refs);\n            var object = {};\n            for(let key in this.refs){\n                object[key] = this.refs[key].value;\n            }\n            console.log('Object ',object);\n            var result = '';\n            for(let key in object){\n                result += `${key} ${object[key]}`;\n            }\n            this.setState({msg:result});\n            // var name = this.refs.name.value;\n            // var salary = this.refs.salary.value;\n            // var city = this.refs.city.value;\n            // var phone = this.refs.phone.value;\n            //var result = `Name is ${name} Salary is ${salary} City is ${city} and Phone is ${phone}`;\n            //this.setState({msg:result});\n\n    }\n  render(){\n    return (\n        // We create 4 text boxes and assign 4 refs\n        <div>\n            <h1>Register Form</h1>\n            <p>{this.state.msg}</p>    \n            <input type='text' ref=\"name\" placeholder=\"Type Your Name\"/>\n            <br/>\n            <input type='text' ref=\"salary\" placeholder=\"Type Your Salary\"/>\n            <br/>\n            <input type='text' ref=\"city\" placeholder=\"Type Your City\"/>\n            <br/>\n            <input type='text' ref=\"phone\" placeholder=\"Type Your Phone\"/>\n            <br/>\n            <button onClick={this.saveInfo.bind(this)}>Register</button>\n        </div>\n    )\n  }  \n}","import React from 'react';\nimport {itemOperations} from '../models/itemoperations';\nimport {List} from '../components/List';\nimport {Search} from '../components/Search';\nimport {doAjax,fetchDemo} from '../utils/ajax';\nimport {makeAxiosCall} from '../utils/axioscall';\nimport axios from 'axios';\nimport {RefDemo} from './RefDemo';\nexport class Shop extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.searchValue = '';\n        this.msg = false;\n        this.counter = 1;\n        this.interval = undefined;\n        this.state = {items:[], msg:this.msg};\n        console.log('Constructor call');\n    }\n    jsonResult(json){\n        console.log('JSON Rec in Shop Component ',typeof json);\n        try{\n        var object = JSON.parse(json);\n        }\n        catch(e){\n            console.log('JSON Cant parse ',e);\n        }\n        console.log(\"Object is \",object, \" \",typeof object);\n        var arr = object['mobiles'];\n        this.setState({...this.state,items:arr});\n    }\n    // static getDerivedStateFromProps(props, state){\n    //     console.log('GetDerived State from Props call ',props, state);\n    //     // State Manipluation\n    //     return state;\n    // }\n    takeInput(event){\n            this.searchValue = event.target.value;\n    }\n    componentWillMount(){\n        console.log('******* Component Will Mount Call and DO Ajax Call');\n        //const url = \"https://raw.githubusercontent.com/brainmentorspvtltd/myserverdata/master/mobiles.json\";\n        const url = \"/mobiles.json\";\n        //doAjax(url, this.jsonResult.bind(this)); // callback fn attach\n        //var promise = fetchDemo(url);\n        var promise = makeAxiosCall(url);\n        var promise2 = makeAxiosCall(url);\n        var promise3 = makeAxiosCall(url);\n        axios.all([promise,promise2,promise3]).then(arr=>{\n            console.log('All Promise Result is ',arr);\n        })\n       // console.log(\"After End \",promise);\n        promise.then(response=>{\n            console.log('Axios Result is ',response.data['mobiles']);\n            var arr = response.data['mobiles'];\n            //delete localStorage.tokenId;\n         this.setState({...this.state,items:arr});\n        }).catch(err=>{\n            console.log('Error is ',err);\n        })\n    // promise.then(response=>{ // Success\n    // console.log(\"Response is \",response);\n    // response.json().then(data=>{\n    //     console.log(\"Data is \",data);\n    //     var arr = data['mobiles'];\n    //     this.setState({...this.state,items:arr});\n    // }).catch(e=>console.log(\"JSON Parse Error \",e));\n    // }).catch(err=>{  // fail\n    // console.log(\"Error in Response \",err);\n    // });\n        //let itemArray = itemOperations.fill();\n        //this.setState({...this.state,items:itemArray});\n    }\n    toggleMessage(){\n        this.msg = !this.msg;\n        this.setState({...this.state,msg:this.msg});\n    }\n    render(){\n        console.log(\"Render Call \");\n        return (\n            <div>\n                <RefDemo/>\n                <br/>\n                {this.state.msg?<p>Shopping</p>:<h1>Shop Here</h1>}\n                <button onClick={()=>{\n                    this.toggleMessage();\n                }}>Toggle</button>\n                <Search takeInput = {this.takeInput.bind(this)}/>\n                <List items = {this.state.items}/>\n\n            </div>\n        )\n    }\n    componentDidMount(){\n        this. interval = setInterval(()=>{\n                //console.log('Set Interval Call ',this.counter);\n                this.counter++;\n        },4000);\n        console.log('Did Mount Call');\n    }\n    componentShouldUpdate(nextProps, nextState){\n        if(this.state.counter == nextState.counter){\n            return false;\n        }\n        return true;\n    }\n    componentWillUnmount(){\n        console.log('UnMount Call');\n        clearInterval(this.interval);\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Shop } from './container/Shop';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.count = 100;\n    this.state = {counter:this.count};\n  }\n  changeX(){\n        this.count++;\n        this.setState ({counter:this.count});\n  }\n  render(){\n  \n  var jsx = this.state.counter==100?<Shop/>:<h1>No Shop Loaded</h1>\n  return (\n    <div>\n    <button onClick={this.changeX.bind(this)}>COUNTDOWN</button>\n    {jsx}\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}